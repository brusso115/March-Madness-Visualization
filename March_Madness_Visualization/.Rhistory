<<<<<<< HEAD
temp %>% group_by(.,Gender) %>% summarise(.,Mean_Body_Temp=mean(Body.Temp),Mean_Heart_Rate=mean(Heart.Rate))
#2
#2
ggplot(temp) + geom_histogram(aes(x=Body.Temp))
#2
g = ggplot(temp)
g + geom_histogram(aes(x=Body.Temp))
g + geom_histogram(aes(x=Hear.Ratex))
g + geom_histogram(aes(x=Hear.Rate))
g + geom_histogram(aes(x=Heart.Rate))
g + geom_histogram(aes(x=Gender))
g + geom_bar(aes(x=Gender))
g + geom_point(aes(x=Body.Temp, y=Heart.Rate))
g + geom_boxplot(aes(x=Gender, y=Body.Temp))
g + geom_boxplot(aes(x=Gender, y=Heart.Rate))
g + geom_boxplot(aes(x=Gender, y=Heart.Rate, color=Body.Temp))
g + geom_boxplot(aes(x=Gender, y=Heart.Rate, color=Body.Temp))
g + geom_boxplot(aes(x=Gender, y=Heart.Rate))
#3
temp %>% summarise(.,Mean_Body_Temp=mean(Body.Temp))
#3
mean_body_temp = mean(temp$Body.Temp)
mean_body_temp
t.test(mean_body_temp,mu=98.6)
t.test(temp$Body.Temp,mu=98.6)
#3
t.test(temp$Body.Temp,mu=98.6)
#3
t.test(temp$Body.Temp,mu=98.6)
var.test(Body.Temp ~ Gender, data=temp)
t.test(Body.Temp ~ Gender, data=temp, var.equal = TRUE)
#5
var.test(Heart.Rate ~ Gender, data=temp)
t.test(Heart.Rate ~ Gender, data=temp, alternative="less")
#5
var.test(Heart.Rate ~ Gender, data=temp)
t.test(Heart.Rate ~ Gender, data=temp, alternative="less")
t.test(Heart.Rate ~ Gender, data=temp, alternative="greater")
t.test(Heart.Rate ~ Gender, data=temp, alternative="less")
t.test(Heart.Rate ~ Gender, data=temp, alternative="greater")
t.test(Heart.Rate ~ Gender, data=temp, alternative="less")
#4
var.test(Body.Temp ~ Gender, data=temp)
#5
var.test(Heart.Rate ~ Gender, data=temp)
data("PlantGrowth")
data <- data("PlantGrowth")
head(data)
data <- data(PlantGrowth)
data
data(PlantGrowth)
library(datasets)
data(PlantGrowth)
PlantGrowth
levels(PlantGrowth$group)
PlantGrowth
PlantGrowth %>% ggplot(.) + geom_boxplot(.,aes(x=group, y=weight))
library(dplyr)
library(ggplot2)
PlantGrowth %>% ggplot() + geom_boxplot(.,aes(x=group, y=weight))
library(dplyr)
library(ggplot2)
#1
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
str(temp)
cat('Mean Body Temp:', mean(temp$Body.Temp))
cat('Body Temp Standard Deviation:', sd(temp$Body.Temp))
cat('Mean Heart Rate:', mean(temp$Heart.Rate))
cat('Heart Rate Standard Deviation:', sd(temp$Heart.Rate))
cat('Number of Males:', sum(temp$Gender=='Male'))
cat('Number of Females:', sum(temp$Gender=='Female'))
cat('Correlation b/w Body Temp and Heart Rate:',cor(temp$Body.Temp,temp$Heart.Rate))
temp %>% group_by(.,Gender) %>% summarise(.,Mean_Body_Temp=mean(Body.Temp),Mean_Heart_Rate=mean(Heart.Rate))
#2
g = ggplot(temp)
g + geom_histogram(aes(x=Body.Temp))
g + geom_histogram(aes(x=Heart.Rate))
g + geom_bar(aes(x=Gender))
g + geom_point(aes(x=Body.Temp, y=Heart.Rate))
g + geom_boxplot(aes(x=Gender, y=Body.Temp))
g + geom_boxplot(aes(x=Gender, y=Heart.Rate))
#3
t.test(temp$Body.Temp,mu=98.6)
#4
var.test(Body.Temp ~ Gender, data=temp)
t.test(Body.Temp ~ Gender, data=temp, var.equal = TRUE)
#5
var.test(Heart.Rate ~ Gender, data=temp)
library(datasets)
PlantGrowth %>% ggplot() + geom_boxplot(.,aes(x=group, y=weight))
PlantGrowth %>% ggplot(PlantGrowth) + geom_boxplot(.,aes(x=group, y=weight))
ggplot(PlantGrowth) + geom_boxplot(.,aes(x=group, y=weight))
library(datasets)
ggplot(PlantGrowth) + geom_boxplot(.,aes(x=group, y=weight))
ggplot(PlantGrowth) + geom_boxplot(aes(x=group, y=weight))
ggplot(PlantGrowth) + geom_boxplot(aes(x=group, y=weight, color=group))
#2
head(PlantGrowth)
#2
bartlett.test(PlantGrowth$weight, PlantGrowth$group)
#3
aov(weight ~ group, data=PlantGrowth)
#3
aov(weight ~ group, data=PlantGrowth)
library(dplyr)
library(ggplot2)
#1
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
str(temp)
cat('Mean Body Temp:', mean(temp$Body.Temp))
cat('Body Temp Standard Deviation:', sd(temp$Body.Temp))
cat('Mean Heart Rate:', mean(temp$Heart.Rate))
cat('Heart Rate Standard Deviation:', sd(temp$Heart.Rate))
cat('Number of Males:', sum(temp$Gender=='Male'))
cat('Number of Females:', sum(temp$Gender=='Female'))
cat('Correlation b/w Body Temp and Heart Rate:',cor(temp$Body.Temp,temp$Heart.Rate))
temp %>% group_by(.,Gender) %>% summarise(.,Mean_Body_Temp=mean(Body.Temp),Mean_Heart_Rate=mean(Heart.Rate))
#2
g = ggplot(temp)
g + geom_histogram(aes(x=Body.Temp))
g + geom_histogram(aes(x=Heart.Rate))
g + geom_bar(aes(x=Gender))
g + geom_point(aes(x=Body.Temp, y=Heart.Rate))
g + geom_boxplot(aes(x=Gender, y=Body.Temp))
g + geom_boxplot(aes(x=Gender, y=Heart.Rate))
#3
t.test(temp$Body.Temp,mu=98.6)
#4
var.test(Body.Temp ~ Gender, data=temp)
t.test(Body.Temp ~ Gender, data=temp, var.equal = TRUE)
#5
var.test(Heart.Rate ~ Gender, data=temp)
#1
library(datasets)
ggplot(PlantGrowth) + geom_boxplot(aes(x=group, y=weight, color=group))
#2
bartlett.test(PlantGrowth$weight, PlantGrowth$group)
#3
summary(aov(weight ~ group, data=PlantGrowth))
#2
bartlett.test(PlantGrowth$weight, PlantGrowth$group)
#2
bartlett.test(PlantGrowth$weight, PlantGrowth$group)
#3
summary(aov(weight ~ group, data=PlantGrowth))
#2
bartlett.test(PlantGrowth$weight, PlantGrowth$group)
HairEyeColor
#1
mosaicplot(HairEyeColor, shade = TRUE)
#1
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor)
mosaicplot(HairEyeColor, shade = TRUE)
#1
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
#1
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)
#1
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
#1
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
#1
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
#1
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
#1
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
HairEyeColor %>% filter(.,Sex=='Female' & Eye=='Brown' & Eye=='Blue')
library(dplyr)
library(ggplot2)
#1
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
str(temp)
cat('Mean Body Temp:', mean(temp$Body.Temp))
cat('Body Temp Standard Deviation:', sd(temp$Body.Temp))
cat('Mean Heart Rate:', mean(temp$Heart.Rate))
cat('Heart Rate Standard Deviation:', sd(temp$Heart.Rate))
cat('Number of Males:', sum(temp$Gender=='Male'))
cat('Number of Females:', sum(temp$Gender=='Female'))
cat('Correlation b/w Body Temp and Heart Rate:',cor(temp$Body.Temp,temp$Heart.Rate))
temp %>% group_by(.,Gender) %>% summarise(.,Mean_Body_Temp=mean(Body.Temp),Mean_Heart_Rate=mean(Heart.Rate))
#2
g = ggplot(temp)
g + geom_histogram(aes(x=Body.Temp))
g + geom_histogram(aes(x=Heart.Rate))
g + geom_bar(aes(x=Gender))
g + geom_point(aes(x=Body.Temp, y=Heart.Rate))
g + geom_boxplot(aes(x=Gender, y=Body.Temp))
g + geom_boxplot(aes(x=Gender, y=Heart.Rate))
#3
t.test(temp$Body.Temp,mu=98.6)
#4
var.test(Body.Temp ~ Gender, data=temp)
t.test(Body.Temp ~ Gender, data=temp, var.equal = TRUE)
#5
var.test(Heart.Rate ~ Gender, data=temp)
#1
library(datasets)
ggplot(PlantGrowth) + geom_boxplot(aes(x=group, y=weight, color=group))
#2
bartlett.test(PlantGrowth$weight, PlantGrowth$group)
#3
summary(aov(weight ~ group, data=PlantGrowth))
#1
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor %>% filter(.,Sex=='Female' & Eye=='Brown' & Eye=='Blue')
HairEyeColor
HairEyeColor[,1]
HairEyeColor[,0]
HairEyeColor[1,]
HairEyeColor[1,]
```{r}
HairEyeColor[1,]
str(HairEyeColor)
HairEyeColor[0]
HairEyeColor
str(HairEyeColor)
HairEyeColor$Sex == 'Female'
HairEyeColor$Hair == 'Blue'
ftable(HairEyeColor)
ftab = ftable(HairEyeColor)
ftab
ftab$Sex == 'Male'
str(HairEyeColor)
HairEyeColor[1]
HairEyeColor
HairEyeColor[2]
HairEyeColor
HairEyeColor[1][1]
HairEyeColor
HairEyeColor[1]
str(HairEyeColor[1])
HairEyeColor[1]
HairEyeColor['Eye']
HairEyeColor[['Eye']]
HairEyeColor['Eye']
HairEyeColor['Sex']
HairEyeColor[,,1]
HairEyeColor[,,'Female']
HairEyeColor[,c('Brown','Blue'),'Female']
#2
HairEyeColor[,c('Brown','Blue'),'Female']
#2
FemalesBlueBrownEyes = HairEyeColor[,c('Brown','Blue'),'Female']
FemalesBlueBrownEyes
mosiacPlot(FemalesBlueBrownEyes, shade=TRUE)
mosaicPlot(FemalesBlueBrownEyes, shade=TRUE)
mosaicplot(FemalesBlueBrownEyes, shade=TRUE)
#2
FemalesBlueBrownEyes = HairEyeColor[,c('Brown','Blue'),'Female']
FemalesBlueBrownEyes
mosaicplot(FemalesBlueBrownEyes, shade=TRUE)
chisq.test(FemalesBlueBrownEyes)
chisq = chisq.test(FemalesBlueBrownEyes)
chisq
#3
chisq$expected
#2
FemalesBlueBrownEyes = HairEyeColor[,c('Brown','Blue'),'Female']
FemalesBlueBrownEyes
mosaicplot(FemalesBlueBrownEyes, shade=TRUE)
chisq = chisq.test(FemalesBlueBrownEyes)
chisq
#3
chisq$exp
chisq$observed
#3
chisq$exp
chisq$observed - chisq$expected
chisq$expected - chisq$observed
#3
chisq$exp
chisq$expected - chisq$observed
setwd("~/Desktop/NYC Data Science Academy/Project_1")
install.packages('shiny')
shiny::runApp('March_Madness_Visualization')
runApp('March_Madness_Visualization')
runApp('March_Madness_Visualization')
head(x)
# generate bins based on input$bins from ui.R
x <- read.csv('/Users/baileyrusso/Desktop/NYC Data Science Academy/Project_1/ncaam-march-mania-2021/MDataFiles_Stage1/MNCAATourneyCompactResults.csv')
head(x)
runApp('March_Madness_Visualization')
runApp('March_Madness_Visualization')
install.packages("googleVis")
runApp('March_Madness_Visualization')
runApp('March_Madness_Visualization')
setwd("~/Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization")
runApp()
runApp()
x
runApp()
x
# generate bins based on input$bins from ui.R
x <- read.csv(cat(relativePath,'MNCAATourneyCompactResults.csv'))
x
relativePath = '/Users/baileyrusso/Desktop/NYC Data Science Academy/Project_1/'
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x <- read.csv(cat(relativePath,'MNCAATourneyCompactResults.csv'))
x
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# generate bins based on input$bins from ui.R
x <- read.csv(cat(relativePath,'MNCAATourneyCompactResults.csv'))
x
# generate bins based on input$bins from ui.R
print(cat(relativePath,'MNCAATourneyCompactResults.csv'))
# generate bins based on input$bins from ui.R
print(paste0(relativePath,'MNCAATourneyCompactResults.csv'))
runApp()
relativePath = '/Users/baileyrusso/Desktop/NYC Data Science Academy/Project_1/'
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x <- read.csv(paste0(relativePath,'MNCAATourneyCompactResults.csv'))
x
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# generate bins based on input$bins from ui.R
x <- read.csv(paste0(relativePath,'MNCAATourneyCompactResults.csv'))
# generate bins based on input$bins from ui.R
print(paste0(relativePath,'MNCAATourneyCompactResults.csv'))
# generate bins based on input$bins from ui.R
x <- read.csv(paste0(relativePath,'MNCAATourneyCompactResults.csv'))
relativePath = '/Users/baileyrusso/Desktop/NYC Data Science Academy/Project_1/ncaam-march-mania-2021'
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyCompactResults.csv'))
x
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# generate bins based on input$bins from ui.R
x <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyCompactResults.csv'))
relativePath = '/Users/baileyrusso/Desktop/NYC Data Science Academy/Project_1/ncaam-march-mania-2021/'
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyCompactResults.csv'))
x
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# generate bins based on input$bins from ui.R
x <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyCompactResults.csv'))
x
runApp()
# generate bins based on input$bins from ui.R
x <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyDetailedResults.csv'))
x
runApp()
# generate bins based on input$bins from ui.R
df <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyDetailedResults.csv'))
df
runApp()
runApp()
runApp()
df %>% ggplot(aes(x=WScore))
df %>% ggplot(aes(x=WScore)) + geom_density()
runApp()
runApp()
df %>% ggplot(aes(x=WScore)) + geom_density()
df %>% ggplot(aes(x=LScore)) + geom_density()
runApp()
head(df)
runApp()
# generate bins based on input$bins from ui.R
df <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyDetailedResults.csv'))
df %>% ggplot(aes(x=WScore)) + geom_density()
df %>% gather(.,key=TeamID, value=c(WTeamID,LTeamID))
library(tidyr)
# generate bins based on input$bins from ui.R
df <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyDetailedResults.csv'))
df %>% ggplot(aes(x=WScore)) + geom_density()
df %>% gather(.,key=TeamID, value=c(WTeamID,LTeamID))
df %>% gather(.,key='TeamID', value=c(WTeamID,LTeamID))
head(df)
df %>% gather(.,TeamID, c(WTeamID, LTeamId))
df %>% gather(.,TeamID, c(WTeamID, LTeamID))
df %>% gather(.,TeamID, c('WTeamID', 'LTeamID'))
df %>% ggplot(aes(x=WScore)) + geom_density()
head(df)
df %>% gather(.,TeamID, c('WTeamID', 'LTeamID'))
df %>% gather(.,TeamID, 'WTeamID', 'LTeamID')
df %>% gather(.,key=TeamID, 'WTeamID', 'LTeamID')
head(df)
df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df %>% select(.,WTeamID, WScore, LTeamID, LScore) %>% gather(.,TeamID, WTeamID, LTeamID)
head(df)
df %>% select(.,WTeamID, WScore, LTeamID, LScore) %>% gather(.,TeamID, WTeamID, LTeamID)
df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df %>% select(.,WTeamID, WScore, LTeamID, LScore) %>% gather(.,"TeamID")
df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df %>% select(.,WTeamID, WScore, LTeamID, LScore) %>% gather(.,"TeamID")
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore) %>% gather(.,"TeamID")
tail(df2)
head(df2)
tail(df2)
head(df2)
head(df)
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df %>% select(.,WTeamID, WScore, LTeamID, LScore) %>% gather(.,"TeamID")
df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore) %>% gather(.,"TeamID")
df2
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2
df2 = data.frame(TeamID = c(df2[,c('WTeamID','WScore')], df2[,c('LTeamID','LScore')]))
df2
head(df)
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2 = data.frame(TeamID = c(df2[,c('WTeamID')], df2[,c('LTeamID')]), TeamScore= c(df2[,c('WScore')], df2[,c('LScore')]))
df2
head(df)
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2
df2
df2 = data.frame(TeamID = c(df2[,c('WTeamID')], df2[,c('LTeamID')]), TeamScore= c(df2[,c('WScore')], df2[,c('LScore')]))
df2
head(df)
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2
nrows(df2)
nrow(df2)
nrow(df)
# generate bins based on input$bins from ui.R
df <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyDetailedResults.csv'))
df %>% ggplot(aes(x=WScore)) + geom_density()
head(df)
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2
df2 = data.frame(TeamID = c(df2[,c('WTeamID')], df2[,c('LTeamID')]), TeamScore= c(df2[,c('WScore')], df2[,c('LScore')]))
df2
nrow(df2)
nrow(df)
df2
# generate bins based on input$bins from ui.R
df <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyDetailedResults.csv'))
df %>% ggplot(aes(x=WScore)) + geom_density()
head(df)
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2
df2 = data.frame(TeamID = c(df2[,c('WTeamID')], df2[,c('LTeamID')]), TeamScore= c(df2[,c('WScore')], df2[,c('LScore')]))
df2
nrow(df2)
df2
df2 %>% mutate(.,Outcome=ifelse(row_number() <= nrow(df2),'W','L'))
df2 = df2 %>% mutate(.,Outcome=ifelse(row_number() <= nrow(df2),'W','L'))
df2
df2 %>% filter(.,Outcome=='L')
# generate bins based on input$bins from ui.R
df <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyDetailedResults.csv'))
df %>% ggplot(aes(x=WScore)) + geom_density()
head(df)
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2
df2 = data.frame(TeamID = c(df2[,c('WTeamID')], df2[,c('LTeamID')]), TeamScore= c(df2[,c('WScore')], df2[,c('LScore')]))
nrow(df2)
df2 = df2 %>% mutate(.,Outcome=ifelse(row_number() <= nrow(df2)/2,'W','L'))
df2 %>% filter(.,Outcome=='L')
df2
df2 %>% filter(.,Outcome=='L')
# generate bins based on input$bins from ui.R
df <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyDetailedResults.csv'))
df %>% ggplot(aes(x=WScore)) + geom_density()
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2 = data.frame(TeamID = c(df2[,c('WTeamID')], df2[,c('LTeamID')]), TeamScore= c(df2[,c('WScore')], df2[,c('LScore')]))
df2 = df2 %>% mutate(.,Outcome=ifelse(row_number() <= nrow(df2)/2,'W','L'))
runApp()
# generate bins based on input$bins from ui.R
df <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MNCAATourneyDetailedResults.csv'))
df %>% ggplot(aes(x=WScore)) + geom_density()
df2 = df %>% select(.,WTeamID, WScore, LTeamID, LScore)
df2 = data.frame(TeamID = c(df2[,c('WTeamID')], df2[,c('LTeamID')]), TeamScore= c(df2[,c('WScore')], df2[,c('LScore')]))
df2 = df2 %>% mutate(.,Outcome=ifelse(row_number() <= nrow(df2)/2,'W','L'))
df2
df2 %>% ggplot(.,aes(x=TeamScore, color=Outcome))
df2 %>% ggplot(.,aes(x=TeamScore, color=Outcome))
df2 %>% ggplot(.,aes(x=TeamScore, color=Outcome)) + geom_density()
runApp()
df2 %>% ggplot(.,aes(x=TeamScore, fill=Outcome)) + geom_density()
df2 %>% ggplot(.,aes(x=TeamScore, color=Outcome)) + geom_density()
runApp()
=======
GameLoc=ifelse(WTeamID==teamID, as.character(WLoc), ifelse(WLoc==as.character('N'),as.character('N'),ifelse(WLoc==as.character('H'),as.character('A'),as.character('H'))))
)
}
dataframes_all[[j]] = do.call("rbind", dataframes_one_season)
}
combined_df = do.call("rbind", dataframes_all)
combined_df = combined_df[, -c(3:34)]
combined_df = combined_df %>% group_by(.,Season, TeamID) %>% summarise(.,NumberOfTournamentWins=sum(Outcome=='W'))
num_tourney_wins = combined_df
test_withTourneyWinData = inner_join(test,num_tourney_wins,by=c('Season','TeamID'))
WinPercentage_RegSeason = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses))
WinPercentage_RegSeason = WinPercentage_RegSeason %>% select(.,Season,TeamID,WinPercentage_RegSeason)
test_withTourneyWinData = inner_join(test_withTourneyWinData,WinPercentage_RegSeason,by=c('Season','TeamID'))
test_withTourneyWinData_Grouped = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(across(c('Score':'WinPercentage_RegSeason'),mean)) %>% select(.,-c('Outcome','GameLoc','TeamName'))
test_withTourneyWinData_Grouped
test_withTourneyWinData_Grouped %>% select(.,Season,TeamID,WinPercentage_RegSeason)
joinToMain = test_withTourneyWinData_Grouped %>% select(.,Season,TeamID,WinPercentage_RegSeason)
inner_join(RegSeasonDataMainGrouped, joinToMain,by=c('Season','TeamID'))
RegSeasonDataMainGrouped = inner_join(RegSeasonDataMainGrouped, joinToMain,by=c('Season','TeamID'))
fileName = paste(path_out, 'RegSeasonDataMainGrouped.csv',sep = '')
write.csv(RegSeasonDataMainGrouped,fileName)
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
RegSeasonDataMainGrouped
RegSeasonDataMainGrouped
RegSeasonDataMainGrouped %>% select(.,-c(1,2))
RegSeasonDataMainGrouped = RegSeasonDataMainGrouped %>% select(.,-c(1,2))
fileName = paste(path_out, 'RegSeasonDataMainGrouped.csv',sep = '')
write.csv(RegSeasonDataMainGrouped,fileName)
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
RegSeasonDataMainGrouped_Sub
RegSeasonDataMainGrouped <- read.csv(paste0(relativePath,'UserGeneratedDataFiles/RegSeasonDataMainGrouped.csv'))
RegSeasonDataMainGrouped_Sub = RegSeasonDataMainGrouped %>% filter(.,Season=='2020')
RegSeasonDataMainGrouped_Sub
RegSeasonDataMainGrouped %>% filter(.,Season=='2020')
RegSeasonDataMainGrouped
test_withTourneyWinData_Grouped
tourneyResultsData <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MNCAATourneyDetailedResults.csv'))
#regSeasonAll <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MNCAATourneyDetailedResults.csv'))
teams <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MTeams.csv'))
teams = teams %>% select(.,TeamID, TeamName)
seasons <- c(2010:2021)
tourneyResultsData
dataframes_all = c()
for (j in 1:length(seasons)) {
season = seasons[[j]]
regSeason = tourneyResultsData %>% filter(.,Season==season)
dataframes_one_season = c()
for (i in 1:length(teams$TeamID)) {
teamID = teams$TeamID[i]
dataframes_one_season[[i]] = regSeason %>% filter(.,WTeamID == teamID| LTeamID == teamID) %>%  mutate(.,Score=ifelse(WTeamID==teamID,WScore,LScore),
OppScore=ifelse(WTeamID==teamID,LScore,WScore),
FGM=ifelse(WTeamID==teamID,WFGM,LFGM),
OppFGM=ifelse(WTeamID==teamID,LFGM,WFGM),
FGA=ifelse(WTeamID==teamID,WFGA,LFGA),
OppFGA=ifelse(WTeamID==teamID,LFGA,WFGA),
FGM3=ifelse(WTeamID==teamID,WFGM3,LFGM3),
OppFGM3=ifelse(WTeamID==teamID,LFGM3,WFGM3),
FGA3=ifelse(WTeamID==teamID,WFGA3,LFGA3),
OppFGA3=ifelse(WTeamID==teamID,LFGA3,WFGA3),
FTM=ifelse(WTeamID==teamID,WFTM,LFTM),
OppFTM=ifelse(WTeamID==teamID,LFTM,WFTM),
FTA=ifelse(WTeamID==teamID,WFTA,LFTA),
OppFTA=ifelse(WTeamID==teamID,LFTA,WFTA),
OR=ifelse(WTeamID==teamID,WOR,LOR),
OppOR=ifelse(WTeamID==teamID,LOR,WOR),
DR=ifelse(WTeamID==teamID,WDR,LDR),
OppDR=ifelse(WTeamID==teamID,LDR,WDR),
Ast=ifelse(WTeamID==teamID,WAst,LAst),
OppAst=ifelse(WTeamID==teamID,LAst,WAst),
TO=ifelse(WTeamID==teamID,WTO,LTO),
OppTO=ifelse(WTeamID==teamID,LTO,WTO),
Stl=ifelse(WTeamID==teamID,WStl,LStl),
OppStl=ifelse(WTeamID==teamID,LStl,WStl),
Blk=ifelse(WTeamID==teamID,WBlk,LBlk),
OppBlk=ifelse(WTeamID==teamID,LBlk,WBlk),
PF=ifelse(WTeamID==teamID,WPF,LPF),
OppPF=ifelse(WTeamID==teamID,LPF,WPF),
TeamID=ifelse(WTeamID==teamID,WTeamID,LTeamID),
OppTeamID=ifelse(WTeamID==teamID,LTeamID,WTeamID),
Outcome=ifelse(WTeamID==teamID, as.character('W'),as.character('L')),
GameLoc=ifelse(WTeamID==teamID, as.character(WLoc), ifelse(WLoc==as.character('N'),as.character('N'),ifelse(WLoc==as.character('H'),as.character('A'),as.character('H'))))
)
}
dataframes_all[[j]] = do.call("rbind", dataframes_one_season)
}
combined_df = do.call("rbind", dataframes_all)
combined_df = combined_df[, -c(3:34)]
combined_df = combined_df %>% group_by(.,Season, TeamID) %>% summarise(.,NumberOfTournamentWins=sum(Outcome=='W'))
num_tourney_wins = combined_df
test_withTourneyWinData = inner_join(test,num_tourney_wins,by=c('Season','TeamID'))
WinPercentage_RegSeason = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses))
WinPercentage_RegSeason = WinPercentage_RegSeason %>% select(.,Season,TeamID,WinPercentage_RegSeason)
test_withTourneyWinData = inner_join(test_withTourneyWinData,WinPercentage_RegSeason,by=c('Season','TeamID'))
test_withTourneyWinData_Grouped = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(across(c('Score':'WinPercentage_RegSeason'),mean)) %>% select(.,-c('Outcome','GameLoc','TeamName'))
joinToMain = test_withTourneyWinData_Grouped %>% select(.,Season,TeamID,WinPercentage_RegSeason)
RegSeasonDataMainGrouped = inner_join(RegSeasonDataMainGrouped, joinToMain,by=c('Season','TeamID'))
RegSeasonDataMainGrouped = RegSeasonDataMainGrouped %>% select(.,-c(1,2))
RegSeasonDataMainGrouped
RegSeasonDataMainGrouped = RegSeasonDataMainGrouped %>% select(.,-c('WinPercentage_RegSeason.x')) %>% rename(WinPercentage_RegSeason = WinPercentage_RegSeason.y)
RegSeasonDataMainGrouped
fileName = paste(path_out, 'RegSeasonDataMainGrouped.csv',sep = '')
write.csv(RegSeasonDataMainGrouped,fileName)
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
RegSeasonDataMainGrouped
tourneyResultsData <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MNCAATourneyDetailedResults.csv'))
#regSeasonAll <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MNCAATourneyDetailedResults.csv'))
teams <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MTeams.csv'))
teams = teams %>% select(.,TeamID, TeamName)
seasons <- c(2010:2021)
tourneyResultsData
dataframes_all = c()
for (j in 1:length(seasons)) {
season = seasons[[j]]
regSeason = tourneyResultsData %>% filter(.,Season==season)
dataframes_one_season = c()
for (i in 1:length(teams$TeamID)) {
teamID = teams$TeamID[i]
dataframes_one_season[[i]] = regSeason %>% filter(.,WTeamID == teamID| LTeamID == teamID) %>%  mutate(.,Score=ifelse(WTeamID==teamID,WScore,LScore),
OppScore=ifelse(WTeamID==teamID,LScore,WScore),
FGM=ifelse(WTeamID==teamID,WFGM,LFGM),
OppFGM=ifelse(WTeamID==teamID,LFGM,WFGM),
FGA=ifelse(WTeamID==teamID,WFGA,LFGA),
OppFGA=ifelse(WTeamID==teamID,LFGA,WFGA),
FGM3=ifelse(WTeamID==teamID,WFGM3,LFGM3),
OppFGM3=ifelse(WTeamID==teamID,LFGM3,WFGM3),
FGA3=ifelse(WTeamID==teamID,WFGA3,LFGA3),
OppFGA3=ifelse(WTeamID==teamID,LFGA3,WFGA3),
FTM=ifelse(WTeamID==teamID,WFTM,LFTM),
OppFTM=ifelse(WTeamID==teamID,LFTM,WFTM),
FTA=ifelse(WTeamID==teamID,WFTA,LFTA),
OppFTA=ifelse(WTeamID==teamID,LFTA,WFTA),
OR=ifelse(WTeamID==teamID,WOR,LOR),
OppOR=ifelse(WTeamID==teamID,LOR,WOR),
DR=ifelse(WTeamID==teamID,WDR,LDR),
OppDR=ifelse(WTeamID==teamID,LDR,WDR),
Ast=ifelse(WTeamID==teamID,WAst,LAst),
OppAst=ifelse(WTeamID==teamID,LAst,WAst),
TO=ifelse(WTeamID==teamID,WTO,LTO),
OppTO=ifelse(WTeamID==teamID,LTO,WTO),
Stl=ifelse(WTeamID==teamID,WStl,LStl),
OppStl=ifelse(WTeamID==teamID,LStl,WStl),
Blk=ifelse(WTeamID==teamID,WBlk,LBlk),
OppBlk=ifelse(WTeamID==teamID,LBlk,WBlk),
PF=ifelse(WTeamID==teamID,WPF,LPF),
OppPF=ifelse(WTeamID==teamID,LPF,WPF),
TeamID=ifelse(WTeamID==teamID,WTeamID,LTeamID),
OppTeamID=ifelse(WTeamID==teamID,LTeamID,WTeamID),
Outcome=ifelse(WTeamID==teamID, as.character('W'),as.character('L')),
GameLoc=ifelse(WTeamID==teamID, as.character(WLoc), ifelse(WLoc==as.character('N'),as.character('N'),ifelse(WLoc==as.character('H'),as.character('A'),as.character('H'))))
)
}
dataframes_all[[j]] = do.call("rbind", dataframes_one_season)
}
combined_df = do.call("rbind", dataframes_all)
combined_df = combined_df[, -c(3:34)]
combined_df = combined_df %>% group_by(.,Season, TeamID) %>% summarise(.,NumberOfTournamentWins=sum(Outcome=='W'))
num_tourney_wins = combined_df
test_withTourneyWinData = inner_join(test,num_tourney_wins,by=c('Season','TeamID'))
WinPercentage_RegSeason = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses))
WinPercentage_RegSeason = WinPercentage_RegSeason %>% select(.,Season,TeamID,WinPercentage_RegSeason)
test_withTourneyWinData = inner_join(test_withTourneyWinData,WinPercentage_RegSeason,by=c('Season','TeamID'))
test_withTourneyWinData_Grouped = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(across(c('Score':'WinPercentage_RegSeason'),mean)) %>% select(.,-c('Outcome','GameLoc','TeamName'))
joinToMain = test_withTourneyWinData_Grouped %>% select(.,Season,TeamID,WinPercentage_RegSeason)
RegSeasonDataMainGrouped = inner_join(RegSeasonDataMainGrouped, joinToMain,by=c('Season','TeamID'))
test_withTourneyWinData
test_withTourneyWinData_Grouped = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(across(c('Score':'WinPercentage_RegSeason'),mean)) %>% select(.,-c('Outcome','GameLoc','TeamName'))
joinToMain = test_withTourneyWinData_Grouped %>% select(.,Season,TeamID,WinPercentage_RegSeason)
RegSeasonDataMainGrouped = inner_join(RegSeasonDataMainGrouped, joinToMain,by=c('Season','TeamID'))
RegSeasonDataMainGrouped = RegSeasonDataMainGrouped %>% select(.,-c(1,2))
RegSeasonDataMainGrouped = RegSeasonDataMainGrouped %>% select(.,-c('WinPercentage_RegSeason.x')) %>% rename(WinPercentage_RegSeason = WinPercentage_RegSeason.y)
RegSeasonDataMainGrouped
tourneyResultsData <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MNCAATourneyDetailedResults.csv'))
#regSeasonAll <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MNCAATourneyDetailedResults.csv'))
teams <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MTeams.csv'))
teams = teams %>% select(.,TeamID, TeamName)
seasons <- c(2010:2021)
tourneyResultsData
dataframes_all = c()
for (j in 1:length(seasons)) {
season = seasons[[j]]
regSeason = tourneyResultsData %>% filter(.,Season==season)
dataframes_one_season = c()
for (i in 1:length(teams$TeamID)) {
teamID = teams$TeamID[i]
dataframes_one_season[[i]] = regSeason %>% filter(.,WTeamID == teamID| LTeamID == teamID) %>%  mutate(.,Score=ifelse(WTeamID==teamID,WScore,LScore),
OppScore=ifelse(WTeamID==teamID,LScore,WScore),
FGM=ifelse(WTeamID==teamID,WFGM,LFGM),
OppFGM=ifelse(WTeamID==teamID,LFGM,WFGM),
FGA=ifelse(WTeamID==teamID,WFGA,LFGA),
OppFGA=ifelse(WTeamID==teamID,LFGA,WFGA),
FGM3=ifelse(WTeamID==teamID,WFGM3,LFGM3),
OppFGM3=ifelse(WTeamID==teamID,LFGM3,WFGM3),
FGA3=ifelse(WTeamID==teamID,WFGA3,LFGA3),
OppFGA3=ifelse(WTeamID==teamID,LFGA3,WFGA3),
FTM=ifelse(WTeamID==teamID,WFTM,LFTM),
OppFTM=ifelse(WTeamID==teamID,LFTM,WFTM),
FTA=ifelse(WTeamID==teamID,WFTA,LFTA),
OppFTA=ifelse(WTeamID==teamID,LFTA,WFTA),
OR=ifelse(WTeamID==teamID,WOR,LOR),
OppOR=ifelse(WTeamID==teamID,LOR,WOR),
DR=ifelse(WTeamID==teamID,WDR,LDR),
OppDR=ifelse(WTeamID==teamID,LDR,WDR),
Ast=ifelse(WTeamID==teamID,WAst,LAst),
OppAst=ifelse(WTeamID==teamID,LAst,WAst),
TO=ifelse(WTeamID==teamID,WTO,LTO),
OppTO=ifelse(WTeamID==teamID,LTO,WTO),
Stl=ifelse(WTeamID==teamID,WStl,LStl),
OppStl=ifelse(WTeamID==teamID,LStl,WStl),
Blk=ifelse(WTeamID==teamID,WBlk,LBlk),
OppBlk=ifelse(WTeamID==teamID,LBlk,WBlk),
PF=ifelse(WTeamID==teamID,WPF,LPF),
OppPF=ifelse(WTeamID==teamID,LPF,WPF),
TeamID=ifelse(WTeamID==teamID,WTeamID,LTeamID),
OppTeamID=ifelse(WTeamID==teamID,LTeamID,WTeamID),
Outcome=ifelse(WTeamID==teamID, as.character('W'),as.character('L')),
GameLoc=ifelse(WTeamID==teamID, as.character(WLoc), ifelse(WLoc==as.character('N'),as.character('N'),ifelse(WLoc==as.character('H'),as.character('A'),as.character('H'))))
)
}
dataframes_all[[j]] = do.call("rbind", dataframes_one_season)
}
combined_df = do.call("rbind", dataframes_all)
combined_df = combined_df[, -c(3:34)]
combined_df = combined_df %>% group_by(.,Season, TeamID) %>% summarise(.,NumberOfTournamentWins=sum(Outcome=='W'))
num_tourney_wins = combined_df
test_withTourneyWinData = inner_join(test,num_tourney_wins,by=c('Season','TeamID'))
WinPercentage_RegSeason = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses))
WinPercentage_RegSeason = WinPercentage_RegSeason %>% select(.,Season,TeamID,WinPercentage_RegSeason)
test_withTourneyWinData = inner_join(test_withTourneyWinData,WinPercentage_RegSeason,by=c('Season','TeamID'))
test_withTourneyWinData_Grouped = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(across(c('Score':'WinPercentage_RegSeason'),mean)) %>% select(.,-c('Outcome','GameLoc','TeamName'))
joinToMain = test_withTourneyWinData_Grouped %>% select(.,Season,TeamID,WinPercentage_RegSeason)
RegSeasonDataMainGrouped = inner_join(RegSeasonDataMainGrouped, joinToMain,by=c('Season','TeamID'))
joinToMain
RegSeasonDataMainGrouped
rm(list=ls())
library(shiny)
library(dplyr)
library(ggplot2)
library(tidyr)
relativePath = '/Users/baileyrusso/Desktop/NYC Data Science Academy/Project_1/ncaam-march-mania-2021/'
path_out = '/Users/baileyrusso/Desktop/NYC Data Science Academy/Project_1/ncaam-march-mania-2021//UserGeneratedDataFiles/'
regSeasonAll <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MRegularSeasonDetailedResults.csv'))
#regSeasonAll <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MNCAATourneyDetailedResults.csv'))
teams <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MTeams.csv'))
teams = teams %>% select(.,TeamID, TeamName)
seasons <- c(2010:2021)
regSeasonAll
dataframes_all = c()
for (j in 1:length(seasons)) {
season = seasons[[j]]
regSeason = regSeasonAll %>% filter(.,Season==season)
dataframes_one_season = c()
for (i in 1:length(teams$TeamID)) {
teamID = teams$TeamID[i]
dataframes_one_season[[i]] = regSeason %>% filter(.,WTeamID == teamID| LTeamID == teamID) %>%  mutate(.,Score=ifelse(WTeamID==teamID,WScore,LScore),
OppScore=ifelse(WTeamID==teamID,LScore,WScore),
FGM=ifelse(WTeamID==teamID,WFGM,LFGM),
OppFGM=ifelse(WTeamID==teamID,LFGM,WFGM),
FGA=ifelse(WTeamID==teamID,WFGA,LFGA),
OppFGA=ifelse(WTeamID==teamID,LFGA,WFGA),
FGM3=ifelse(WTeamID==teamID,WFGM3,LFGM3),
OppFGM3=ifelse(WTeamID==teamID,LFGM3,WFGM3),
FGA3=ifelse(WTeamID==teamID,WFGA3,LFGA3),
OppFGA3=ifelse(WTeamID==teamID,LFGA3,WFGA3),
FTM=ifelse(WTeamID==teamID,WFTM,LFTM),
OppFTM=ifelse(WTeamID==teamID,LFTM,WFTM),
FTA=ifelse(WTeamID==teamID,WFTA,LFTA),
OppFTA=ifelse(WTeamID==teamID,LFTA,WFTA),
OR=ifelse(WTeamID==teamID,WOR,LOR),
OppOR=ifelse(WTeamID==teamID,LOR,WOR),
DR=ifelse(WTeamID==teamID,WDR,LDR),
OppDR=ifelse(WTeamID==teamID,LDR,WDR),
Ast=ifelse(WTeamID==teamID,WAst,LAst),
OppAst=ifelse(WTeamID==teamID,LAst,WAst),
TO=ifelse(WTeamID==teamID,WTO,LTO),
OppTO=ifelse(WTeamID==teamID,LTO,WTO),
Stl=ifelse(WTeamID==teamID,WStl,LStl),
OppStl=ifelse(WTeamID==teamID,LStl,WStl),
Blk=ifelse(WTeamID==teamID,WBlk,LBlk),
OppBlk=ifelse(WTeamID==teamID,LBlk,WBlk),
PF=ifelse(WTeamID==teamID,WPF,LPF),
OppPF=ifelse(WTeamID==teamID,LPF,WPF),
TeamID=ifelse(WTeamID==teamID,WTeamID,LTeamID),
OppTeamID=ifelse(WTeamID==teamID,LTeamID,WTeamID),
Outcome=ifelse(WTeamID==teamID, as.character('W'),as.character('L')),
GameLoc=ifelse(WTeamID==teamID, as.character(WLoc), ifelse(WLoc==as.character('N'),as.character('N'),ifelse(WLoc==as.character('H'),as.character('A'),as.character('H'))))
)
}
dataframes_all[[j]] = do.call("rbind", dataframes_one_season)
}
combined_df = do.call("rbind", dataframes_all)
combined_df = combined_df[, -c(3:34)]
combined_df = combined_df %>% mutate(.,FGPercentage=FGM/FGA) %>% mutate(.,OppFGPercentage=OppFGM/OppFGA) %>% mutate(.,ThreePercentage=FGM3/FGA3) %>% mutate(.,OppThreePercentage=OppFGM3/OppFGA3) %>% mutate(.,FTPercentage=FTM/FTA) %>% mutate(.,OppFTPercentage=OppFTM/OppFTA) %>% mutate(.,TSPercentage=Score/(2*(FGA + 0.44*FTA))) %>% mutate(.,OppTSPercentage=OppScore/(2*(OppFGA + 0.44*OppFTA))) %>% mutate(.,EffectiveFGPercentage=(FGM + 0.5*FGM3)/FGA) %>% mutate(.,OppEffectiveFGPercentage=(OppFGM + 0.5*OppFGM3)/OppFGA) %>% mutate(.,Possessions=(FGA - OR) + TO + (0.44*FTA)) %>% mutate(.,OppPossessions=(OppFGA - OppOR) + OppTO + (0.44*OppFTA)) %>% mutate(.,OE=(Score/Possessions)*100) %>% mutate(OppOE=(OppScore/OppPossessions)*100) %>% mutate(.,DE=(OppScore/OppPossessions)*100) %>% mutate(.,OppDE=(Score/Possessions)*100) %>% mutate(.,TurnoverPercentage=TO/(FGA +(0.44*FTA + TO))) %>% mutate(.,OppTurnoverPercentage=OppTO/(OppFGA +(0.44*OppFTA + OppTO))) %>% mutate(.,ORPercentage=OR/(OR + OppDR)) %>% mutate(.,OppORPercentage=OppOR/(OppOR + DR)) %>% mutate(.,DRPercentage=DR/(OppOR + DR)) %>% mutate(.,OppDRPercentage=OppDR/(OR + OppDR))
############### Adjusting stats ##################
###############GameAverageOE - (OppTeamSeasonAverageDE - NationalSeasonAverage)############
combined_df
drop_cols = c('DayNum','Outcome','GameLoc','OppTeamID')
#Get the average statistic for each team at the season level
combined_df_team_avg = combined_df %>% select(-drop_cols) %>% group_by(.,Season,TeamID) %>% summarise(across(c("Score":"OppDRPercentage"),mean))
#Get the national average for each statistic
combined_df_avg = combined_df %>% select(-drop_cols) %>% group_by(.,Season,TeamID) %>% summarise(across(c("Score":"OppDRPercentage"),mean)) %>% group_by(.,Season) %>% summarise(across(c("Score":"OppDRPercentage"),mean))
#Rename all columns before merging
combined_df_team_avg = combined_df_team_avg %>% rename_all(~ paste0("AvgOpp_", names(combined_df_team_avg)))
combined_df_avg = combined_df_avg %>% rename_all(~ paste0("NationalAvg_",names(combined_df_avg)))
#Merge to get opponent seasonal averages and national averages
joined_df = inner_join(combined_df, combined_df_team_avg, by=c("Season" = "AvgOpp_Season", "OppTeamID" = "AvgOpp_TeamID"))
joined_df = inner_join(joined_df, combined_df_avg,by=c("Season" = "NationalAvg_Season"))
joined_df = inner_join(joined_df, teams, by="TeamID")
test = joined_df
############### Adjusting stats ##################
###############GameAverageOE - (OppTeamSeasonAverageDE - NationalSeasonAverage)############
colnames(test)
for (i in 3:55) {
if (colnames(test)[i] == 'Outcome' | colnames(test)[i] == 'TeamID' | colnames(test)[i] == 'OppTeamID' | colnames(test)[i] == 'GameLoc') {
print('No')
} else {
if (startsWith(colnames(test)[i], 'Opp')) {
stat_name = as.name(paste0('Adjusted_',colnames(test)[i]))
test = test %>% mutate(.,!!stat_name := test[,i] - ((get(paste0('AvgOpp_',substr(colnames(test)[i],4,nchar(colnames(test)[i]))))) - get(paste0('NationalAvg_',substr(colnames(test)[i],4,nchar(colnames(test)[i]))))))
} else {
stat_name = as.name(paste0('Adjusted_',colnames(test)[i]))
test = test %>% mutate(.,!!stat_name := test[,i] - (get(paste0('AvgOpp_Opp',colnames(test)[i])) - get(paste0('NationalAvg_Opp',colnames(test)[i]))))
}
}
}
colnames(test)
test = test[-c(57:156)]
test = test %>% mutate(.,Adjusted_EM = Adjusted_OE - Adjusted_DE, Adjusted_OppEM = Adjusted_OppOE - Adjusted_OppDE)
test = test %>% select(.,-c('Adjusted_FTPercentage','Adjusted_OppFTPercentage'))
test %>% select(.,Adjusted_OE,Adjusted_OppOE, Adjusted_DE, Adjusted_OppDE,OE,OppOE,DE)
test %>% filter(.,Season=='2019') %>% group_by(.,Season,TeamID, TeamName) %>% summarise(.,OE=mean(OE)) %>% arrange(.,desc(OE))
test
possession_stats_team = test %>% group_by(.,Season,TeamID) %>% summarise(PossessionsPerGame=mean(Possessions))
possession_stats_opp = test %>% group_by(.,Season,TeamID) %>% summarise(OppPossessionsPerGame=mean(Possessions))
possession_stats_opp
test
test = inner_join(test,possession_stats_team,by=c('Season','TeamID'))
test = inner_join(test,possession_stats_opp,by=c('Season' = 'Season','OppTeamID' = 'TeamID'))
national_avg_possessions_per_game = test %>% group_by(.,Season,TeamID) %>% summarise(.,PossessionsPerGame=mean(Possessions)) %>% group_by(.,Season) %>% summarise(.,NationalAvg_PossessionsPerGame=mean(PossessionsPerGame))
test = inner_join(test, national_avg_possessions_per_game,by='Season')
colnames(test)
test
test = test %>% mutate(.,ExpectedPossessions=NationalAvg_PossessionsPerGame + ( PossessionsPerGame - NationalAvg_PossessionsPerGame) + (OppPossessionsPerGame - NationalAvg_PossessionsPerGame)) %>% mutate(.,ActualPossessionsInGame=(Possessions + OppPossessions) / 2)
# test %>% mutate(.,Adjusted_Tempo = ((((ActualPossessionsInGame - ExpectedPossessions)/ExpectedPossessions)*100) * (PossessionsPerGame/100)) + PossessionsPerGame) %>% mutate(.,Adjusted_OppTempo = ((((ActualPossessionsInGame - ExpectedPossessions)/ExpectedPossessions)*100) * (OppPossessionsPerGame/100)) + OppPossessionsPerGame) %>% mutate(.,check=NationalAvg_PossessionsPerGame - ((Adjusted_Tempo - NationalAvg_PossessionsPerGame) + (Adjusted_OppTempo - NationalAvg_PossessionsPerGame)))
#
test = test %>% mutate(.,Difference=(ActualPossessionsInGame - ExpectedPossessions)) %>% mutate(.,SeasonPaceSum=PossessionsPerGame + OppPossessionsPerGame) %>% mutate(.,SeasonPacePercentage=PossessionsPerGame/SeasonPaceSum) %>% mutate(.,OppSeasonPacePercentage=OppPossessionsPerGame/SeasonPaceSum) %>% mutate(.,PaceShare=Difference*SeasonPacePercentage) %>% mutate(.,OppPaceShare=Difference*OppSeasonPacePercentage) %>% mutate(.,Adjusted_Tempo=PaceShare+PossessionsPerGame) %>% mutate(.,Adjusted_OppTempo=OppPaceShare+OppPossessionsPerGame) %>% mutate(.,check = NationalAvg_PossessionsPerGame + (Adjusted_Tempo-NationalAvg_PossessionsPerGame) + (Adjusted_OppTempo-NationalAvg_PossessionsPerGame))
test
team_averages = test %>% filter(.,Season=='2021') %>% group_by(.,Season,TeamName,TeamID) %>% summarise(.,across(c("Score":"Adjusted_OppTempo"),mean)) %>% select(.,Season,TeamID,TeamName,Adjusted_OE,Adjusted_DE,Adjusted_OppOE,Adjusted_OppDE,Adjusted_Tempo,Adjusted_OppTempo)
season_averages = test %>% filter(.,Season=='2021') %>% group_by(.,Season) %>% select(.,Season,TeamID,TeamName,Adjusted_OE,Adjusted_DE,Adjusted_OppOE,Adjusted_OppDE,Adjusted_Tempo,Adjusted_OppTempo) %>% summarise(across(c('Adjusted_OE':'Adjusted_OppTempo'),mean))
######### Predict Score For Two Teams ############
team_1 = team_averages %>% filter(.,TeamName=='Baylor')
team_2 = team_averages %>% filter(.,TeamName=='Wisconsin')
season_averages
team_1
ExpectedOE_team1 = season_averages[,'Adjusted_OE'] + (team_1[,'Adjusted_OE'] - season_averages[,'Adjusted_OE']) + (team_2[,'Adjusted_DE'] - season_averages[,'Adjusted_OE'])
ExpectedOE_team2 = season_averages[,'Adjusted_OE'] + (team_2[,'Adjusted_OE'] - season_averages[,'Adjusted_OE']) + (team_1[,'Adjusted_DE'] - season_averages[,'Adjusted_OE'])
ExpectedTempo = season_averages[,'Adjusted_Tempo'] + (team_1[,'Adjusted_Tempo'] - season_averages[,'Adjusted_Tempo']) + (team_2[,'Adjusted_Tempo'] - season_averages[,'Adjusted_Tempo'])
Team1Score = ExpectedOE_team1/100 * ExpectedTempo
Team2Score = ExpectedOE_team2/100 * ExpectedTempo
Team1Name = team_1[,'TeamName']
Team2Name = team_2[,'TeamName']
Team1Name <- data.frame(lapply(Team1Name, as.character), stringsAsFactors=FALSE)
Team2Name <- data.frame(lapply(Team2Name, as.character), stringsAsFactors=FALSE)
sprintf("%s : %s %s : %s", Team1Name, Team1Score, Team2Name, Team2Score)
test %>% filter(.,Season=='2021') %>% group_by(.,Season,TeamID,TeamName) %>% summarise(.,v=mean(Adjusted_Tempo)) %>% arrange(.,desc(v))
test %>% filter(.,Season=='2021') %>% group_by(.,Season,TeamID,TeamName) %>% summarise(.,v=mean(Adjusted_EM)) %>% arrange(.,desc(v))
colnames(test)
test %>% filter(.,Season=='2020') %>% group_by(.,Season,TeamID,TeamName) %>% summarise(.,v=mean(OE)) %>% arrange(.,desc(v))
test %>% filter(.,Season=='2020') %>% group_by(.,Season,TeamID,TeamName) %>% summarise(.,v=mean(Adjusted_OE)) %>% arrange(.,desc(v))
colnames(test)
test = test %>% select(-c('PossessionsPerGame':'OppPaceShare')) %>% select(.,-c("check"))
test
colnames(test)
AdjEff = test %>% group_by(.,Season,TeamID) %>% summarise(Adjusted_OE=mean(Adjusted_OE), Adjusted_DE=mean(Adjusted_DE), Adjusted_EM=mean(Adjusted_EM))
AdjEff = AdjEff %>% rename(.,OppSeasonAdjusted_OE = Adjusted_OE,OppSeasonAdjusted_DE = Adjusted_DE,OppSeasonAdjusted_EM = Adjusted_EM)
AdjEff
test
test_withOppAdjEff = inner_join(test,AdjEff,by=c("Season" = "Season","OppTeamID" = "TeamID"))
test_withOppAdjEff
RegSeasonDataMain = test_withOppAdjEff
colnames(RegSeasonDataMain)
RegSeasonDataMainGrouped = RegSeasonDataMain  %>% group_by(.,Season,TeamName, TeamID) %>% summarise(across(c('Score':'OppSeasonAdjusted_EM'),mean)) %>% select(.,-c('Outcome','GameLoc'))
RegSeasonDataMainGrouped
tourneyResultsData <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MNCAATourneyDetailedResults.csv'))
#regSeasonAll <- read.csv(paste0(relativePath,'MDataFiles_Stage2/MNCAATourneyDetailedResults.csv'))
teams <- read.csv(paste0(relativePath,'MDataFiles_Stage1/MTeams.csv'))
teams = teams %>% select(.,TeamID, TeamName)
seasons <- c(2010:2021)
tourneyResultsData
dataframes_all = c()
for (j in 1:length(seasons)) {
season = seasons[[j]]
regSeason = tourneyResultsData %>% filter(.,Season==season)
dataframes_one_season = c()
for (i in 1:length(teams$TeamID)) {
teamID = teams$TeamID[i]
dataframes_one_season[[i]] = regSeason %>% filter(.,WTeamID == teamID| LTeamID == teamID) %>%  mutate(.,Score=ifelse(WTeamID==teamID,WScore,LScore),
OppScore=ifelse(WTeamID==teamID,LScore,WScore),
FGM=ifelse(WTeamID==teamID,WFGM,LFGM),
OppFGM=ifelse(WTeamID==teamID,LFGM,WFGM),
FGA=ifelse(WTeamID==teamID,WFGA,LFGA),
OppFGA=ifelse(WTeamID==teamID,LFGA,WFGA),
FGM3=ifelse(WTeamID==teamID,WFGM3,LFGM3),
OppFGM3=ifelse(WTeamID==teamID,LFGM3,WFGM3),
FGA3=ifelse(WTeamID==teamID,WFGA3,LFGA3),
OppFGA3=ifelse(WTeamID==teamID,LFGA3,WFGA3),
FTM=ifelse(WTeamID==teamID,WFTM,LFTM),
OppFTM=ifelse(WTeamID==teamID,LFTM,WFTM),
FTA=ifelse(WTeamID==teamID,WFTA,LFTA),
OppFTA=ifelse(WTeamID==teamID,LFTA,WFTA),
OR=ifelse(WTeamID==teamID,WOR,LOR),
OppOR=ifelse(WTeamID==teamID,LOR,WOR),
DR=ifelse(WTeamID==teamID,WDR,LDR),
OppDR=ifelse(WTeamID==teamID,LDR,WDR),
Ast=ifelse(WTeamID==teamID,WAst,LAst),
OppAst=ifelse(WTeamID==teamID,LAst,WAst),
TO=ifelse(WTeamID==teamID,WTO,LTO),
OppTO=ifelse(WTeamID==teamID,LTO,WTO),
Stl=ifelse(WTeamID==teamID,WStl,LStl),
OppStl=ifelse(WTeamID==teamID,LStl,WStl),
Blk=ifelse(WTeamID==teamID,WBlk,LBlk),
OppBlk=ifelse(WTeamID==teamID,LBlk,WBlk),
PF=ifelse(WTeamID==teamID,WPF,LPF),
OppPF=ifelse(WTeamID==teamID,LPF,WPF),
TeamID=ifelse(WTeamID==teamID,WTeamID,LTeamID),
OppTeamID=ifelse(WTeamID==teamID,LTeamID,WTeamID),
Outcome=ifelse(WTeamID==teamID, as.character('W'),as.character('L')),
GameLoc=ifelse(WTeamID==teamID, as.character(WLoc), ifelse(WLoc==as.character('N'),as.character('N'),ifelse(WLoc==as.character('H'),as.character('A'),as.character('H'))))
)
}
dataframes_all[[j]] = do.call("rbind", dataframes_one_season)
}
combined_df = do.call("rbind", dataframes_all)
combined_df = combined_df[, -c(3:34)]
combined_df = combined_df %>% group_by(.,Season, TeamID) %>% summarise(.,NumberOfTournamentWins=sum(Outcome=='W'))
num_tourney_wins = combined_df
test_withTourneyWinData = inner_join(test,num_tourney_wins,by=c('Season','TeamID'))
WinPercentage_RegSeason = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses))
WinPercentage_RegSeason = WinPercentage_RegSeason %>% select(.,Season,TeamID,WinPercentage_RegSeason)
test_withTourneyWinData = inner_join(test_withTourneyWinData,WinPercentage_RegSeason,by=c('Season','TeamID'))
test_withTourneyWinData_Grouped = test_withTourneyWinData %>% group_by(.,Season,TeamID) %>% summarise(across(c('Score':'WinPercentage_RegSeason'),mean)) %>% select(.,-c('Outcome','GameLoc','TeamName'))
joinToMain = test_withTourneyWinData_Grouped %>% select(.,Season,TeamID,WinPercentage_RegSeason)
RegSeasonDataMainGrouped
RegSeasonDataMainGrouped = inner_join(RegSeasonDataMainGrouped, joinToMain,by=c('Season','TeamID'))
RegSeasonDataMainGrouped
fileName = paste(path_out, 'RegSeasonDataMainGrouped.csv',sep = '')
write.csv(RegSeasonDataMainGrouped,fileName)
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
RegSeasonDataMainGrouped
RegSeasonDataMainGrouped %>% filter(.,Season=='2020')
RegSeasonDataMainGrouped %>% filter(.,Season=='2021')
RegSeasonDataMainGrouped %>% filter(.,Season=='2019')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
RegSeasonDataMainGrouped
num_tourney_wins
WinPercentage_RegSeason %>% select(.,Season,TeamID,WinPercentage_RegSeason)
WinPercentage_RegSeason
joinToMain
RegSeasonDataMainGrouped = RegSeasonDataMain  %>% group_by(.,Season,TeamName, TeamID) %>% summarise(across(c('Score':'OppSeasonAdjusted_EM'),mean)) %>% select(.,-c('Outcome','GameLoc'))
RegSeasonDataMainGrouped
colnames(RegSeasonDataMainGrouped)
RegSeasonDataMain
colnames(RegSeasonDataMainGrouped)
RegSeasonDataMain %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses))
RegSeasonDataMain %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses)) %>% filter(.,Season=='2020')
RegSeasonDataMain %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses)) %>% filter(.,Season=='2021')
RegSeasonDataMain %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses)) %>% select(.,Season,TeamID,WinPercentage_RegSeason)
WinPercentageData = RegSeasonDataMain %>% group_by(.,Season,TeamID) %>% summarise(numWins=sum(Outcome=='W'), numLosses=sum(Outcome=='L')) %>% mutate(.,WinPercentage_RegSeason=numWins/(numWins+numLosses)) %>% select(.,Season,TeamID,WinPercentage_RegSeason)
inner_join(RegSeasonDataMainGrouped, WinPercentageData, by=c('Season','TeamID'))
inner_join(RegSeasonDataMainGrouped, WinPercentageData, by=c('Season','TeamID')) %>% filter(.,Season=='2021')
RegSeasonDataMainGrouped = inner_join(RegSeasonDataMainGrouped, WinPercentageData, by=c('Season','TeamID'))
fileName = paste(path_out, 'RegSeasonDataMainGrouped.csv',sep = '')
write.csv(RegSeasonDataMainGrouped,fileName)
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
test
shiny::runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
knitr::opts_chunk$set(echo = TRUE)
season_averages
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
RegSeasonData
colnames(RegSeasonData)
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
RegSeasonDataMain
RegSeasonDataMain
RegSeasonDataMainGrouped
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
RegSeasonTTGrouped
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
#fileName = paste(path_out, 'TeamAverages.csv',sep = '')
#write.csv(team_averages,fileName)
RegSeasonTT
#fileName = paste(path_out, 'TeamAverages.csv',sep = '')
#write.csv(team_averages,fileName)
RegSeasonTT
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
RegSeasonTT_Sub = RegSeasonTT %>% select(.,Season,TeamID,NumberOfTournamentWins)
RegSeasonTT_Sub
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
runApp('Desktop/NYC Data Science Academy/Project_1/March_Madness_Visualization')
install.packages("rsconnect")
shiny::runApp()
>>>>>>> new git repository
runApp()
